{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Heru1\\\\Documents\\\\GitHub\\\\ThinkfulProjects\\\\M-23\\\\23-02\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Timer.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nexport default function Timer({\n  masterObject,\n  isTimerRunning\n}) {\n  function toPercent(part, whole) {\n    return 100 - Math.floor(part / whole * 100);\n  }\n\n  function timerRenderer() {\n    let temp = \"\";\n    let timerTotal = \"\";\n    let ariaValue = 0;\n\n    if (masterObject.mode === \"Focus\") {\n      timerTotal = `Focusing for ${minutesToDuration(masterObject.focusCur)} minutes`;\n      temp = masterObject.focusCount;\n      ariaValue = toPercent(masterObject.focusCount, masterObject.focusCur * 60);\n    } else if (masterObject.mode === \"Break\") {\n      timerTotal = `On Break for ${minutesToDuration(masterObject.breakCur)} minutes`;\n      temp = masterObject.breakCount;\n      ariaValue = toPercent(masterObject.breakCount, masterObject.breakCur * 60);\n    }\n\n    const timerRemaining = `${secondsToDuration(temp)} remaining`;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, timerTotal), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, timerRemaining))), !isTimerRunning ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 28\n      }\n    }, \"PAUSED\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": ariaValue // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: `${ariaValue}%`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  if (masterObject.isRunning == true) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, timerRenderer());\n  } else return null;\n}","map":{"version":3,"sources":["C:/Users/Heru1/Documents/GitHub/ThinkfulProjects/M-23/23-02/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.js"],"names":["React","minutesToDuration","secondsToDuration","Timer","masterObject","isTimerRunning","toPercent","part","whole","Math","floor","timerRenderer","temp","timerTotal","ariaValue","mode","focusCur","focusCount","breakCur","breakCount","timerRemaining","height","width","isRunning"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAf,EAAiD;AAC9D,WAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,WAAQ,MAAMC,IAAI,CAACC,KAAL,CAAYH,IAAI,GAAGC,KAAR,GAAiB,GAA5B,CAAd;AACD;;AAED,WAASG,aAAT,GAAyB;AACvB,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,QAAIV,YAAY,CAACW,IAAb,KAAsB,OAA1B,EAAmC;AACjCF,MAAAA,UAAU,GAAI,gBAAeZ,iBAAiB,CAC5CG,YAAY,CAACY,QAD+B,CAE5C,UAFF;AAGAJ,MAAAA,IAAI,GAAGR,YAAY,CAACa,UAApB;AACAH,MAAAA,SAAS,GAAGR,SAAS,CACnBF,YAAY,CAACa,UADM,EAEnBb,YAAY,CAACY,QAAb,GAAwB,EAFL,CAArB;AAID,KATD,MASO,IAAIZ,YAAY,CAACW,IAAb,KAAsB,OAA1B,EAAmC;AACxCF,MAAAA,UAAU,GAAI,gBAAeZ,iBAAiB,CAC5CG,YAAY,CAACc,QAD+B,CAE5C,UAFF;AAGAN,MAAAA,IAAI,GAAGR,YAAY,CAACe,UAApB;AACAL,MAAAA,SAAS,GAAGR,SAAS,CACnBF,YAAY,CAACe,UADM,EAEnBf,YAAY,CAACc,QAAb,GAAwB,EAFL,CAArB;AAID;;AAED,UAAME,cAAc,GAAI,GAAElB,iBAAiB,CAACU,IAAD,CAAO,YAAlD;AAEA,wBACE,uDACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCC,UAAjC,CAFF,eAIE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGO,cADH,CAJF,CADF,CADF,EAWG,CAACf,cAAD,gBAAkB;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB,GAAoD,IAXvD,eAYE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEgB,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAeP,SALjB,CAK4B;AAL5B;AAME,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAG,GAAER,SAAU;AAAtB,OANT,CAMqC;AANrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAZF,CADF;AA6BD;;AAED,MAAIV,YAAY,CAACmB,SAAb,IAA0B,IAA9B,EAAoC;AAClC,wBAAO,0CAAGZ,aAAa,EAAhB,CAAP;AACD,GAFD,MAEO,OAAO,IAAP;AACR","sourcesContent":["import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\n\r\nexport default function Timer({ masterObject, isTimerRunning }) {\r\n  function toPercent(part, whole) {\r\n    return (100 - Math.floor((part / whole) * 100));\r\n  }\r\n\r\n  function timerRenderer() {\r\n    let temp = \"\";\r\n    let timerTotal = \"\";\r\n    let ariaValue = 0;\r\n\r\n    if (masterObject.mode === \"Focus\") {\r\n      timerTotal = `Focusing for ${minutesToDuration(\r\n        masterObject.focusCur\r\n      )} minutes`;\r\n      temp = masterObject.focusCount;\r\n      ariaValue = toPercent(\r\n        masterObject.focusCount,\r\n        masterObject.focusCur * 60\r\n      );\r\n    } else if (masterObject.mode === \"Break\") {\r\n      timerTotal = `On Break for ${minutesToDuration(\r\n        masterObject.breakCur\r\n      )} minutes`;\r\n      temp = masterObject.breakCount;\r\n      ariaValue = toPercent(\r\n        masterObject.breakCount,\r\n        masterObject.breakCur * 60\r\n      );\r\n    }\r\n\r\n    const timerRemaining = `${secondsToDuration(temp)} remaining`;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">{timerTotal}</h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {timerRemaining}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {!isTimerRunning ? <h2 className=\"col\">PAUSED</h2> : null}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={ariaValue} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${ariaValue}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (masterObject.isRunning == true) {\r\n    return <>{timerRenderer()}</>;\r\n  } else return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}