{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Heru1\\\\Documents\\\\GitHub\\\\ThinkfulProjects\\\\M-23\\\\23-02\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport ButtonComponent from \"./ButtonComponent\";\nimport Timer from \"./Timer\";\nimport StopButton from \"./StopButton\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  console.log(`Sanity Check ${isTimerRunning}`);\n  const [focusValue, focusHandler] = useState({\n    val: 25,\n    inc: 5,\n    max: 60,\n    min: 5\n  });\n  const [breakValue, breakHandler] = useState({\n    val: 5,\n    inc: 1,\n    max: 15,\n    min: 1\n  });\n  const [clockValue, clockHandler] = useState({\n    valFocus: focusValue.val * 60,\n    curFocus: focusValue.val * 60,\n    valBreak: breakValue.val * 60,\n    curBreak: breakValue.val * 60,\n    mode: \"Focus\",\n    state: \"Stopped\"\n  });\n  console.log(clockValue.valFocus, clockValue.curFocus);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (clockValue.curFocus !== 0) {\n      switch (true) {\n        case clockValue.mode === \"Stopped\":\n          {\n            clockHandler({\n              valFocus: focusValue.val * 60,\n              curFocus: focusValue.val * 60,\n              valBreak: breakValue.val * 60,\n              curBreak: breakValue.val * 60,\n              mode: \"Focus\",\n              state: \"Stopped\"\n            });\n            setIsTimerRunning(false);\n            break;\n          }\n\n        case clockValue.mode === \"Focus\":\n          {\n            clockHandler({ ...clockValue,\n              curFocus: clockValue.curFocus - 1,\n              state: \"Running\"\n            });\n            break;\n          }\n\n        case clockValue.mode === \"Break\":\n          {\n            clockHandler({ ...clockValue,\n              curFocus: clockValue.curFocus - 1,\n              state: \"Running\"\n            });\n            break;\n          }\n      }\n    }\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Focus Duration: \", minutesToDuration(focusValue.val)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ButtonComponent, {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    dataTestid: \"decrease-focus\",\n    className2: \"oi oi-minus\",\n    focusValue: focusValue,\n    focusHandler: focusHandler,\n    clockValue: clockValue,\n    clockHandler: clockHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(ButtonComponent, {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    dataTestid: \"increase-focus\",\n    className2: \"oi oi-plus\",\n    focusValue: focusValue,\n    focusHandler: focusHandler,\n    clockValue: clockValue,\n    clockHandler: clockHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"Break Duration: \", minutesToDuration(breakValue.val)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonComponent, {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    dataTestid: \"decrease-break\",\n    className2: \"oi oi-minus\",\n    breakValue: breakValue,\n    breakHandler: breakHandler,\n    clockValue: clockValue,\n    clockHandler: clockHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonComponent, {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    dataTestid: \"increase-break\",\n    className2: \"oi oi-plus\",\n    breakValue: breakValue,\n    breakHandler: breakHandler,\n    clockValue: clockValue,\n    clockHandler: clockHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(StopButton, {\n    clockValue: clockValue,\n    clockHandler: clockHandler,\n    focusValue: focusValue,\n    breakValue: breakValue,\n    setIsTimerRunning: setIsTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    clockValue: clockValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Heru1/Documents/GitHub/ThinkfulProjects/M-23/23-02/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","ButtonComponent","Timer","StopButton","minutesToDuration","Pomodoro","isTimerRunning","setIsTimerRunning","console","log","focusValue","focusHandler","val","inc","max","min","breakValue","breakHandler","clockValue","clockHandler","valFocus","curFocus","valBreak","curBreak","mode","state","playPause","prevState","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\n\nimport ButtonComponent from \"./ButtonComponent\";\nimport Timer from \"./Timer\";\nimport StopButton from \"./StopButton\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  console.log(`Sanity Check ${isTimerRunning}`);\n  const [focusValue, focusHandler] = useState({\n    val: 25,\n    inc: 5,\n    max: 60,\n    min: 5,\n  });\n  const [breakValue, breakHandler] = useState({\n    val: 5,\n    inc: 1,\n    max: 15,\n    min: 1,\n  });\n\n  const [clockValue, clockHandler] = useState({\n    valFocus: focusValue.val * 60,\n    curFocus: focusValue.val * 60,\n    valBreak: breakValue.val * 60,\n    curBreak: breakValue.val * 60,\n    mode: \"Focus\",\n    state: \"Stopped\",\n  });\n\n  console.log(clockValue.valFocus, clockValue.curFocus);\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if (clockValue.curFocus !== 0) {\n        switch (true) {\n          case clockValue.mode === \"Stopped\": {\n            clockHandler({\n              valFocus: focusValue.val * 60,\n              curFocus: focusValue.val * 60,\n              valBreak: breakValue.val * 60,\n              curBreak: breakValue.val * 60,\n              mode: \"Focus\",\n              state: \"Stopped\",\n            });\n            setIsTimerRunning(false);\n            break;\n          }\n          case clockValue.mode === \"Focus\": {\n            clockHandler({\n              ...clockValue,\n              curFocus: clockValue.curFocus - 1,\n              state: \"Running\",\n            });\n            break;\n          }\n          case clockValue.mode === \"Break\": {\n            clockHandler({\n              ...clockValue,\n              curFocus: clockValue.curFocus - 1,\n              state: \"Running\",\n            });\n            break;\n          }\n        }\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusValue.val)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <ButtonComponent\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                dataTestid=\"decrease-focus\"\n                className2=\"oi oi-minus\"\n                focusValue={focusValue}\n                focusHandler={focusHandler}\n                clockValue={clockValue}\n                clockHandler={clockHandler}\n              />\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <ButtonComponent\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                dataTestid=\"increase-focus\"\n                className2=\"oi oi-plus\"\n                focusValue={focusValue}\n                focusHandler={focusHandler}\n                clockValue={clockValue}\n                clockHandler={clockHandler}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakValue.val)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <ButtonComponent\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  dataTestid=\"decrease-break\"\n                  className2=\"oi oi-minus\"\n                  breakValue={breakValue}\n                  breakHandler={breakHandler}\n                  clockValue={clockValue}\n                  clockHandler={clockHandler}\n                />\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <ButtonComponent\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  dataTestid=\"increase-break\"\n                  className2=\"oi oi-plus\"\n                  breakValue={breakValue}\n                  breakHandler={breakHandler}\n                  clockValue={clockValue}\n                  clockHandler={clockHandler}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <StopButton\n              clockValue={clockValue}\n              clockHandler={clockHandler}\n              focusValue={focusValue}\n              breakValue={breakValue}\n              setIsTimerRunning={setIsTimerRunning}\n            />\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <Timer clockValue={clockValue} />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}